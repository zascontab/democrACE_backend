// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	paging "github.com/nrfta/go-paging"
)

// PageInfoResolver is an autogenerated mock type for the PageInfoResolver type
type PageInfoResolver struct {
	mock.Mock
}

// EndCursor provides a mock function with given fields: ctx, obj
func (_m *PageInfoResolver) EndCursor(ctx context.Context, obj *paging.PageInfo) (*string, error) {
	ret := _m.Called(ctx, obj)

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *paging.PageInfo) (*string, error)); ok {
		return rf(ctx, obj)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *paging.PageInfo) *string); ok {
		r0 = rf(ctx, obj)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *paging.PageInfo) error); ok {
		r1 = rf(ctx, obj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasNextPage provides a mock function with given fields: ctx, obj
func (_m *PageInfoResolver) HasNextPage(ctx context.Context, obj *paging.PageInfo) (bool, error) {
	ret := _m.Called(ctx, obj)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *paging.PageInfo) (bool, error)); ok {
		return rf(ctx, obj)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *paging.PageInfo) bool); ok {
		r0 = rf(ctx, obj)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *paging.PageInfo) error); ok {
		r1 = rf(ctx, obj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasPreviousPage provides a mock function with given fields: ctx, obj
func (_m *PageInfoResolver) HasPreviousPage(ctx context.Context, obj *paging.PageInfo) (bool, error) {
	ret := _m.Called(ctx, obj)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *paging.PageInfo) (bool, error)); ok {
		return rf(ctx, obj)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *paging.PageInfo) bool); ok {
		r0 = rf(ctx, obj)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *paging.PageInfo) error); ok {
		r1 = rf(ctx, obj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartCursor provides a mock function with given fields: ctx, obj
func (_m *PageInfoResolver) StartCursor(ctx context.Context, obj *paging.PageInfo) (*string, error) {
	ret := _m.Called(ctx, obj)

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *paging.PageInfo) (*string, error)); ok {
		return rf(ctx, obj)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *paging.PageInfo) *string); ok {
		r0 = rf(ctx, obj)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *paging.PageInfo) error); ok {
		r1 = rf(ctx, obj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TotalCount provides a mock function with given fields: ctx, obj
func (_m *PageInfoResolver) TotalCount(ctx context.Context, obj *paging.PageInfo) (*int, error) {
	ret := _m.Called(ctx, obj)

	var r0 *int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *paging.PageInfo) (*int, error)); ok {
		return rf(ctx, obj)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *paging.PageInfo) *int); ok {
		r0 = rf(ctx, obj)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *paging.PageInfo) error); ok {
		r1 = rf(ctx, obj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPageInfoResolver interface {
	mock.TestingT
	Cleanup(func())
}

// NewPageInfoResolver creates a new instance of PageInfoResolver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPageInfoResolver(t mockConstructorTestingTNewPageInfoResolver) *PageInfoResolver {
	mock := &PageInfoResolver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
