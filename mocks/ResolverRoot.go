// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	generated "github.com/sonderkevin/governance/graph/generated"
	mock "github.com/stretchr/testify/mock"
)

// ResolverRoot is an autogenerated mock type for the ResolverRoot type
type ResolverRoot struct {
	mock.Mock
}

// Categoria provides a mock function with given fields:
func (_m *ResolverRoot) Categoria() generated.CategoriaResolver {
	ret := _m.Called()

	var r0 generated.CategoriaResolver
	if rf, ok := ret.Get(0).(func() generated.CategoriaResolver); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(generated.CategoriaResolver)
		}
	}

	return r0
}

// Grupo provides a mock function with given fields:
func (_m *ResolverRoot) Grupo() generated.GrupoResolver {
	ret := _m.Called()

	var r0 generated.GrupoResolver
	if rf, ok := ret.Get(0).(func() generated.GrupoResolver); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(generated.GrupoResolver)
		}
	}

	return r0
}

// Mutation provides a mock function with given fields:
func (_m *ResolverRoot) Mutation() generated.MutationResolver {
	ret := _m.Called()

	var r0 generated.MutationResolver
	if rf, ok := ret.Get(0).(func() generated.MutationResolver); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(generated.MutationResolver)
		}
	}

	return r0
}

// PageInfo provides a mock function with given fields:
func (_m *ResolverRoot) PageInfo() generated.PageInfoResolver {
	ret := _m.Called()

	var r0 generated.PageInfoResolver
	if rf, ok := ret.Get(0).(func() generated.PageInfoResolver); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(generated.PageInfoResolver)
		}
	}

	return r0
}

// Permiso provides a mock function with given fields:
func (_m *ResolverRoot) Permiso() generated.PermisoResolver {
	ret := _m.Called()

	var r0 generated.PermisoResolver
	if rf, ok := ret.Get(0).(func() generated.PermisoResolver); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(generated.PermisoResolver)
		}
	}

	return r0
}



// Query provides a mock function with given fields:
func (_m *ResolverRoot) Query() generated.QueryResolver {
	ret := _m.Called()

	var r0 generated.QueryResolver
	if rf, ok := ret.Get(0).(func() generated.QueryResolver); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(generated.QueryResolver)
		}
	}

	return r0
}

// Usuario provides a mock function with given fields:
func (_m *ResolverRoot) Usuario() generated.UsuarioResolver {
	ret := _m.Called()

	var r0 generated.UsuarioResolver
	if rf, ok := ret.Get(0).(func() generated.UsuarioResolver); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(generated.UsuarioResolver)
		}
	}

	return r0
}

type mockConstructorTestingTNewResolverRoot interface {
	mock.TestingT
	Cleanup(func())
}

// NewResolverRoot creates a new instance of ResolverRoot. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewResolverRoot(t mockConstructorTestingTNewResolverRoot) *ResolverRoot {
	mock := &ResolverRoot{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
