// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	domain "github.com/sonderkevin/governance/domain"
	mock "github.com/stretchr/testify/mock"
)

// GrupoRepository is an autogenerated mock type for the GrupoRepository type
type GrupoRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: _a0
func (_m *GrupoRepository) Delete(_a0 uint) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: _a0
func (_m *GrupoRepository) Get(_a0 uint) (*domain.Grupo, error) {
	ret := _m.Called(_a0)

	var r0 *domain.Grupo
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*domain.Grupo, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(uint) *domain.Grupo); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Grupo)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: _a0
func (_m *GrupoRepository) GetAll(_a0 *domain.GrupoFilter) ([]*domain.Grupo, error) {
	ret := _m.Called(_a0)

	var r0 []*domain.Grupo
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.GrupoFilter) ([]*domain.Grupo, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*domain.GrupoFilter) []*domain.Grupo); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Grupo)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.GrupoFilter) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: _a0
func (_m *GrupoRepository) Save(_a0 *domain.Grupo) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Grupo) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: _a0
func (_m *GrupoRepository) Update(_a0 *domain.Grupo) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Grupo) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewGrupoRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewGrupoRepository creates a new instance of GrupoRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGrupoRepository(t mockConstructorTestingTNewGrupoRepository) *GrupoRepository {
	mock := &GrupoRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
