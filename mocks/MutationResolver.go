// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/sonderkevin/governance/graph/model"
)

// MutationResolver is an autogenerated mock type for the MutationResolver type
type MutationResolver struct {
	mock.Mock
}

// ChangePassword provides a mock function with given fields: ctx, input
func (_m *MutationResolver) ChangePassword(ctx context.Context, input model.ChangePasswordInput) (string, error) {
	ret := _m.Called(ctx, input)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.ChangePasswordInput) (string, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.ChangePasswordInput) string); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.ChangePasswordInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteActividad provides a mock function with given fields: ctx, id
func (_m *MutationResolver) DeleteActividad(ctx context.Context, id string) (string, error) {
	ret := _m.Called(ctx, id)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCategoria provides a mock function with given fields: ctx, id
func (_m *MutationResolver) DeleteCategoria(ctx context.Context, id string) (string, error) {
	ret := _m.Called(ctx, id)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEjecucion provides a mock function with given fields: ctx, id
func (_m *MutationResolver) DeleteEjecucion(ctx context.Context, id string) (string, error) {
	ret := _m.Called(ctx, id)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGad provides a mock function with given fields: ctx, id
func (_m *MutationResolver) DeleteGad(ctx context.Context, id string) (string, error) {
	ret := _m.Called(ctx, id)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGrupo provides a mock function with given fields: ctx, id
func (_m *MutationResolver) DeleteGrupo(ctx context.Context, id string) (string, error) {
	ret := _m.Called(ctx, id)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePrograma provides a mock function with given fields: ctx, id
func (_m *MutationResolver) DeletePrograma(ctx context.Context, id string) (string, error) {
	ret := _m.Called(ctx, id)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProyecto provides a mock function with given fields: ctx, id
func (_m *MutationResolver) DeleteProyecto(ctx context.Context, id string) (string, error) {
	ret := _m.Called(ctx, id)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUsuario provides a mock function with given fields: ctx, id
func (_m *MutationResolver) DeleteUsuario(ctx context.Context, id string) (string, error) {
	ret := _m.Called(ctx, id)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnviarCodigo provides a mock function with given fields: ctx, email
func (_m *MutationResolver) EnviarCodigo(ctx context.Context, email string) (string, error) {
	ret := _m.Called(ctx, email)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTempToken provides a mock function with given fields: ctx, refreshToken
func (_m *MutationResolver) GetTempToken(ctx context.Context, refreshToken string) (*model.TempToken, error) {
	ret := _m.Called(ctx, refreshToken)

	var r0 *model.TempToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.TempToken, error)); ok {
		return rf(ctx, refreshToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.TempToken); ok {
		r0 = rf(ctx, refreshToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TempToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, input
func (_m *MutationResolver) Login(ctx context.Context, input model.LoginUsuarioInput) (*model.RefreshToken, error) {
	ret := _m.Called(ctx, input)

	var r0 *model.RefreshToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.LoginUsuarioInput) (*model.RefreshToken, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.LoginUsuarioInput) *model.RefreshToken); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.RefreshToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.LoginUsuarioInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Registrar provides a mock function with given fields: ctx, input
func (_m *MutationResolver) Registrar(ctx context.Context, input model.RegistrarUsuarioInput) (*model.Usuario, error) {
	ret := _m.Called(ctx, input)

	var r0 *model.Usuario
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.RegistrarUsuarioInput) (*model.Usuario, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.RegistrarUsuarioInput) *model.Usuario); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Usuario)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.RegistrarUsuarioInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveCategoria provides a mock function with given fields: ctx, input
func (_m *MutationResolver) SaveCategoria(ctx context.Context, input model.SaveCategoriaInput) (*model.Categoria, error) {
	ret := _m.Called(ctx, input)

	var r0 *model.Categoria
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.SaveCategoriaInput) (*model.Categoria, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.SaveCategoriaInput) *model.Categoria); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Categoria)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.SaveCategoriaInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveGrupo provides a mock function with given fields: ctx, input
func (_m *MutationResolver) SaveGrupo(ctx context.Context, input model.SaveGrupoInput) (*model.Grupo, error) {
	ret := _m.Called(ctx, input)

	var r0 *model.Grupo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.SaveGrupoInput) (*model.Grupo, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.SaveGrupoInput) *model.Grupo); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Grupo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.SaveGrupoInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCategoria provides a mock function with given fields: ctx, input
func (_m *MutationResolver) UpdateCategoria(ctx context.Context, input model.UpdateCategoriaInput) (*model.Categoria, error) {
	ret := _m.Called(ctx, input)

	var r0 *model.Categoria
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.UpdateCategoriaInput) (*model.Categoria, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.UpdateCategoriaInput) *model.Categoria); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Categoria)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.UpdateCategoriaInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGrupo provides a mock function with given fields: ctx, input
func (_m *MutationResolver) UpdateGrupo(ctx context.Context, input model.UpdateGrupoInput) (*model.Grupo, error) {
	ret := _m.Called(ctx, input)

	var r0 *model.Grupo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.UpdateGrupoInput) (*model.Grupo, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.UpdateGrupoInput) *model.Grupo); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Grupo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.UpdateGrupoInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUsuario provides a mock function with given fields: ctx, input
func (_m *MutationResolver) UpdateUsuario(ctx context.Context, input model.UpdateUsuarioInput) (*model.Usuario, error) {
	ret := _m.Called(ctx, input)

	var r0 *model.Usuario
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.UpdateUsuarioInput) (*model.Usuario, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.UpdateUsuarioInput) *model.Usuario); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Usuario)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.UpdateUsuarioInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerificarUsuario provides a mock function with given fields: ctx, email, code
func (_m *MutationResolver) VerificarUsuario(ctx context.Context, email string, code string) (string, error) {
	ret := _m.Called(ctx, email, code)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, email, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, email, code)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMutationResolver interface {
	mock.TestingT
	Cleanup(func())
}

// NewMutationResolver creates a new instance of MutationResolver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMutationResolver(t mockConstructorTestingTNewMutationResolver) *MutationResolver {
	mock := &MutationResolver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
