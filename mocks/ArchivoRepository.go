// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	domain "github.com/sonderkevin/governance/domain"
	mock "github.com/stretchr/testify/mock"
)

// ArchivoRepository is an autogenerated mock type for the ArchivoRepository type
type ArchivoRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: _a0
func (_m *ArchivoRepository) Delete(_a0 uint) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: _a0
func (_m *ArchivoRepository) Get(_a0 uint) (*domain.Archivo, error) {
	ret := _m.Called(_a0)

	var r0 *domain.Archivo
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*domain.Archivo, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(uint) *domain.Archivo); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Archivo)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: _a0
func (_m *ArchivoRepository) GetAll(_a0 *domain.ArchivoFilter) ([]*domain.Archivo, error) {
	ret := _m.Called(_a0)

	var r0 []*domain.Archivo
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.ArchivoFilter) ([]*domain.Archivo, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*domain.ArchivoFilter) []*domain.Archivo); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Archivo)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.ArchivoFilter) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: _a0
func (_m *ArchivoRepository) Save(_a0 *domain.Archivo) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Archivo) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: _a0
func (_m *ArchivoRepository) Update(_a0 *domain.Archivo) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Archivo) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewArchivoRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewArchivoRepository creates a new instance of ArchivoRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewArchivoRepository(t mockConstructorTestingTNewArchivoRepository) *ArchivoRepository {
	mock := &ArchivoRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
