// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/sonderkevin/governance/graph/model"
)

// UsuarioResolver is an autogenerated mock type for the UsuarioResolver type
type UsuarioResolver struct {
	mock.Mock
}

// Grupo provides a mock function with given fields: ctx, obj
func (_m *UsuarioResolver) Grupo(ctx context.Context, obj *model.Usuario) (*model.Grupo, error) {
	ret := _m.Called(ctx, obj)

	var r0 *model.Grupo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Usuario) (*model.Grupo, error)); ok {
		return rf(ctx, obj)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Usuario) *model.Grupo); ok {
		r0 = rf(ctx, obj)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Grupo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Usuario) error); ok {
		r1 = rf(ctx, obj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Permisos provides a mock function with given fields: ctx, obj
func (_m *UsuarioResolver) Permisos(ctx context.Context, obj *model.Usuario) ([]*model.Permiso, error) {
	ret := _m.Called(ctx, obj)

	var r0 []*model.Permiso
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Usuario) ([]*model.Permiso, error)); ok {
		return rf(ctx, obj)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Usuario) []*model.Permiso); ok {
		r0 = rf(ctx, obj)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Permiso)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Usuario) error); ok {
		r1 = rf(ctx, obj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}


type mockConstructorTestingTNewUsuarioResolver interface {
	mock.TestingT
	Cleanup(func())
}

// NewUsuarioResolver creates a new instance of UsuarioResolver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUsuarioResolver(t mockConstructorTestingTNewUsuarioResolver) *UsuarioResolver {
	mock := &UsuarioResolver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
