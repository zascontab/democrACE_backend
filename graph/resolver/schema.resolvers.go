package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.27

import (
	"context"
	"fmt"

	"github.com/nrfta/go-paging"
	"github.com/sonderkevin/governance/application"
	"github.com/sonderkevin/governance/graph/generated"
	"github.com/sonderkevin/governance/graph/model"
)

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginUsuarioInput) (*model.RefreshToken, error) {
	return r.AuthService.UserLogin(ctx, &input)
}

// Logout is the resolver for the logout field.
func (r *mutationResolver) Logout(ctx context.Context) (string, error) {
	if err := r.AuthService.Logout(ctx); err != nil {
		return "", err
	}
	return "logged out successfully", nil
}

// Registrar is the resolver for the registrar field.
func (r *mutationResolver) Registrar(ctx context.Context, input model.RegistrarUsuarioInput) (*model.Usuario, error) {
	return r.AuthService.UserRegister(&input, r.UsuarioService)
}

// EnviarCodigo is the resolver for the enviarCodigo field.
func (r *mutationResolver) EnviarCodigo(ctx context.Context, email string) (string, error) {
	if _, err := r.AuthService.SendCodigoVerificacion(email, application.SendEmail); err != nil {
		return "", err
	}
	return "code sent", nil
}

// ChangePassword is the resolver for the changePassword field.
func (r *mutationResolver) ChangePassword(ctx context.Context, input model.ChangePasswordInput) (string, error) {
	if err := r.AuthService.ChangePassword(&input); err != nil {
		return "", err
	}
	return "password changed", nil
}

// VerificarUsuario is the resolver for the verificarUsuario field.
func (r *mutationResolver) VerificarUsuario(ctx context.Context, email string, code string) (string, error) {
	if err := r.AuthService.VerificarUsuario(email, code); err != nil {
		return "", err
	}
	return "successfuly verified", nil
}

// GetTempToken is the resolver for the getTempToken field.
func (r *mutationResolver) GetTempToken(ctx context.Context, refreshToken string) (*model.TempToken, error) {
	return r.AuthService.GetTempToken(refreshToken)
}

// SaveCategoria is the resolver for the saveCategoria field.
func (r *mutationResolver) SaveCategoria(ctx context.Context, input model.SaveCategoriaInput) (*model.Categoria, error) {
	// if !IsAdmin(ctx) {
	// 	return nil, Error("access denied")
	// }

	return r.CategoriaService.Save(ctx, &input)
}

// UpdateCategoria is the resolver for the updateCategoria field.
func (r *mutationResolver) UpdateCategoria(ctx context.Context, input model.UpdateCategoriaInput) (*model.Categoria, error) {
	// if !IsAdmin(ctx) {
	// 	return nil, Error("access denied")
	// }

	return r.CategoriaService.Update(&input)
}

// DeleteCategoria is the resolver for the deleteCategoria field.
func (r *mutationResolver) DeleteCategoria(ctx context.Context, id string) (string, error) {
	// if !IsAdmin(ctx) {
	// 	return "", Error("access denied")
	// }

	return r.CategoriaService.Delete(id)
}

// SaveGrupo is the resolver for the saveGrupo field.
func (r *mutationResolver) SaveGrupo(ctx context.Context, input model.SaveGrupoInput) (*model.Grupo, error) {
	panic(fmt.Errorf("not implemented: SaveGrupo - saveGrupo"))
}

// UpdateGrupo is the resolver for the updateGrupo field.
func (r *mutationResolver) UpdateGrupo(ctx context.Context, input model.UpdateGrupoInput) (*model.Grupo, error) {
	panic(fmt.Errorf("not implemented: UpdateGrupo - updateGrupo"))
}

// DeleteGrupo is the resolver for the deleteGrupo field.
func (r *mutationResolver) DeleteGrupo(ctx context.Context, id string) (string, error) {
	panic(fmt.Errorf("not implemented: DeleteGrupo - deleteGrupo"))
}

// UpdateUsuario is the resolver for the updateUsuario field.
func (r *mutationResolver) UpdateUsuario(ctx context.Context, input model.UpdateUsuarioInput) (*model.Usuario, error) {
	if !(IsAdmin(ctx) || SameID(ctx, input.ID)) {
		return nil, Error("access denied")
	}

	return r.UsuarioService.Update(&input)
}

// DeleteUsuario is the resolver for the deleteUsuario field.
func (r *mutationResolver) DeleteUsuario(ctx context.Context, id string) (string, error) {
	if !(IsAdmin(ctx) || SameID(ctx, id)) {
		return "", Error("access denied")
	}

	return r.UsuarioService.Delete(id)
}

// HasPreviousPage is the resolver for the hasPreviousPage field.
func (r *pageInfoResolver) HasPreviousPage(ctx context.Context, obj *paging.PageInfo) (bool, error) {
	return obj.HasPreviousPage()
}

// HasNextPage is the resolver for the hasNextPage field.
func (r *pageInfoResolver) HasNextPage(ctx context.Context, obj *paging.PageInfo) (bool, error) {
	return obj.HasNextPage()
}

// TotalCount is the resolver for the totalCount field.
func (r *pageInfoResolver) TotalCount(ctx context.Context, obj *paging.PageInfo) (*int, error) {
	return obj.TotalCount()
}

// StartCursor is the resolver for the startCursor field.
func (r *pageInfoResolver) StartCursor(ctx context.Context, obj *paging.PageInfo) (*string, error) {
	return obj.StartCursor()
}

// EndCursor is the resolver for the endCursor field.
func (r *pageInfoResolver) EndCursor(ctx context.Context, obj *paging.PageInfo) (*string, error) {
	return obj.EndCursor()
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*model.Usuario, error) {
	u, err := GetUsuarioFromCtx(ctx)
	if err != nil {
		return nil, Error("access denied")
	}

	return r.UsuarioService.ConvertOut(u)
}

// Categoria is the resolver for the categoria field.
func (r *queryResolver) Categoria(ctx context.Context, id string) (*model.Categoria, error) {
	return r.CategoriaService.Get(&id)
}

// Categorias is the resolver for the categorias field.
func (r *queryResolver) Categorias(ctx context.Context, input *model.CategoriaInput, page *paging.PageArgs) (*model.CategoriaNodeConnection, error) {
	return r.CategoriaService.GetAll(input, page)
}

// Grupo is the resolver for the grupo field.
func (r *queryResolver) Grupo(ctx context.Context, id string) (*model.Grupo, error) {
	return r.GrupoService.Get(&id)
}

// Grupos is the resolver for the grupos field.
func (r *queryResolver) Grupos(ctx context.Context, input *model.GrupoInput, page *paging.PageArgs) ([]*model.Grupo, error) {
	return r.GrupoService.GetAll(input)
}

// Permiso is the resolver for the permiso field.
func (r *queryResolver) Permiso(ctx context.Context, id string) (*model.Permiso, error) {
	return r.PermisoService.Get(&id)
}

// Permisos is the resolver for the permisos field.
func (r *queryResolver) Permisos(ctx context.Context, input *model.PermisoInput, page *paging.PageArgs) ([]*model.Permiso, error) {
	return r.PermisoService.GetAll(input)
}

// Usuario is the resolver for the usuario field.
func (r *queryResolver) Usuario(ctx context.Context, id string) (*model.Usuario, error) {
	return r.UsuarioService.Get(&id)
}

// Usuarios is the resolver for the usuarios field.
func (r *queryResolver) Usuarios(ctx context.Context, input *model.UsuarioInput) ([]*model.Usuario, error) {
	return r.UsuarioService.GetAll(input)
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// PageInfo returns generated.PageInfoResolver implementation.
func (r *Resolver) PageInfo() generated.PageInfoResolver { return &pageInfoResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type pageInfoResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
